package tests;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import static main.PartOne.*;
import static main.PartThree.*;
import static main.PartTwo.*;

public class Tests {
    int g;
    int X_SIZE;
    double MIN_RANGE;
    double MAX_RANGE;

    @Before
    public void setUp() {
        X_SIZE = 19;
        MIN_RANGE = -5.0;
        MAX_RANGE = 13.0;
    }

    @Test
    public void testA() {
        int[] expected = {1, 3, 5, 7, 9, 11, 13, 15, 17};
        int[] B = first(g);

        Assert.assertEquals(expected[0], B[0]);
        Assert.assertEquals(expected[4], B[4]);
        Assert.assertEquals(expected[8], B[8]);

        for (int i = 0; i < 9; i++) {
            Assert.assertEquals(expected[i], B[i]);
        }
    }

    @Test
    public void testX() {
        double[] expected = {-5.0, 13.0, 31.0, 49.0, 67.0, 85.0, 103.0, 121.0, 139.0, 157.0, 175.0, 193.0, 211.0, 229.0, 247.0, 265.0, 283.0, 301.0, 319.0};
        double[] newX = second(X_SIZE, MIN_RANGE, MAX_RANGE);

        Assert.assertEquals(expected[0], newX[0], 0.0);
        Assert.assertEquals(expected[9], newX[9], 0.0);
        Assert.assertEquals(expected[18], newX[18], 0.0);

        for (int i = 0; i < 19; i++) {
            Assert.assertEquals(expected[i], newX[i], 0.0);
        }
    }

    @Test
    public void testCache() {
        double[][] newA = third(9, 19);

        double[][] expected = {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {304.25766627314, 1792.9980628898152, 666.079955986969, 134.26017261970068, -0.003299478056209426, -31.650063312591797, -139.88460517145322, 15.793986257005262, 1338.5958550114394, 946.5252366205514, 327.1887196961905, 5.518906759966282, -10.009621018537494, -212.5840891457212, -3.4043691283323296, 630.2533940098637, 1841.8808049549123, 548.0353278980454, 63.96053639304721},
        {1.000257307766892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {304.25766627314, 1792.9980628898152, 666.079955986969, 134.26017261970068, -0.003299478056209426, -31.650063312591797, -139.88460517145322, 15.793986257005262, 1338.5958550114394, 946.5252366205514, 327.1887196961905, 5.518906759966282, -10.009621018537494, -212.5840891457212, -3.4043691283323296, 630.2533940098637, 1841.8808049549123, 548.0353278980454, 63.96053639304721},
        {304.25766627314, 1792.9980628898152, 666.079955986969, 134.26017261970068, -0.003299478056209426, -31.650063312591797, -139.88460517145322, 15.793986257005262, 1338.5958550114394, 946.5252366205514, 327.1887196961905, 5.518906759966282, -10.009621018537494, -212.5840891457212, -3.4043691283323296, 630.2533940098637, 1841.8808049549123, 548.0353278980454, 63.96053639304721},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {304.25766627314, 1792.9980628898152, 666.079955986969, 134.26017261970068, -0.003299478056209426, -31.650063312591797, -139.88460517145322, 15.793986257005262, 1338.5958550114394, 946.5252366205514, 327.1887196961905, 5.518906759966282, -10.009621018537494, -212.5840891457212, -3.4043691283323296, 630.2533940098637, 1841.8808049549123, 548.0353278980454, 63.96053639304721}};

        Assert.assertEquals(expected[0][0], newA[0][0], 0.0001);
        Assert.assertEquals(expected[4][9], newA[4][9], 0.0001);
        Assert.assertEquals(expected[8][18], newA[8][18], 0.0001);

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 19; j++) {
                Assert.assertEquals(expected[i][j], newA[i][j], 0.0001);
            }
        }
    }
}
